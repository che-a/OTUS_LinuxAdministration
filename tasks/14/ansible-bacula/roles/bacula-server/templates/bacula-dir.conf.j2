@/etc/bacula/conf.d/clients.conf
@/etc/bacula/conf.d/filesets.conf
@/etc/bacula/conf.d/pools.conf

Director {                            # define myself
  Name = bacula-dir
  DIRport = 9101                # where we listen for UA connections
  QueryFile = "/etc/bacula/query.sql"
  WorkingDirectory = "/var/spool/bacula"
  PidDirectory = "/var/run"
  Maximum Concurrent Jobs = 1
  Password = "{{ DIR_PASSWORD }}"         # Console password
  Messages = Daemon
  DirAddress = {{ server_ip }}
}

JobDefs {
  Name = "DefaultJob"
  Type = Backup
  Level = Incremental
  Client = bacula-fd
#  FileSet = "Full Set"
  Schedule = "WeeklyCycle"
  Storage = File
  Messages = Standard
  Pool = File
  Priority = 10
  Write Bootstrap = "/var/spool/bacula/%c.bsr"
}

#
# OTUS
Job {
  Name = "OtusClientBackup"
  JobDefs = "DefaultJob"
  Schedule = "OtusSchedule"
  FileSet = "OtusEtc"
  Pool = "OtusPoolRemote"
}

#Job {
#  Name = "OtusClientRestore"
#  Type = Restore
#  Client=bacula-fd
#  FileSet="Full Set"
#  Storage = File
#  Pool = Default
#  Messages = Standard
#  Where = /bacula/restore
#}


# Backup the catalog database (after the nightly save)
#Job {
#  Name = "BackupCatalog"
#  JobDefs = "DefaultJob"
#  Level = Full
#  FileSet="Catalog"
#  Schedule = "WeeklyCycleAfterBackup"
  # This creates an ASCII copy of the catalog
  # Arguments to make_catalog_backup.pl are:
  #  make_catalog_backup.pl <catalog-name>
#  RunBeforeJob = "/usr/libexec/bacula/make_catalog_backup.pl MyCatalog"
  # This deletes the copy of the catalog
#  RunAfterJob  = "/usr/libexec/bacula/delete_catalog_backup"
#  Write Bootstrap = "/var/spool/bacula/%n.bsr"
#  Priority = 11                   # run after main backup
#}

#
# When to do the backups, full backup on first sunday of the month,
#  differential (i.e. incremental since full) every other sunday,
#  and incremental backups other days
Schedule {
  Name = "WeeklyCycle"
  Run = Full 1st sun at 23:05
  Run = Differential 2nd-5th sun at 23:05
  Run = Incremental mon-sat at 23:05
}

# This schedule does the catalog. It starts after the WeeklyCycle
#Schedule {
#  Name = "WeeklyCycleAfterBackup"
#  Run = Full sun-sat at 23:10
#}

Schedule {
    Name = "OtusSchedule"
    Run  = Level=Full           daily  at 0:01

    Run  = Level=Differential   hourly at 0:10
    Run  = Level=Differential   hourly at 0:40

    Run  = Level=Incremental    hourly at 0:05
    Run  = Level=Incremental    hourly at 0:15
    Run  = Level=Incremental    hourly at 0:25
    Run  = Level=Incremental    hourly at 0:35
    Run  = Level=Incremental    hourly at 0:45
    Run  = Level=Incremental    hourly at 0:55
}

#
# OTUS
Storage {
  Name = File
# Do not use "localhost" here
  Address = {{ server_ip }}                # N.B. Use a fully qualified name here
  SDPort = 9103
  Password = "{{ SD_PASSWORD }}"
  Device = FileStorage
  Media Type = File
}

# Generic catalog service
Catalog {
  Name = MyCatalog
# Uncomment the following line if you want the dbi driver
# dbdriver = "dbi:postgresql"; dbaddress = 127.0.0.1; dbport =
  dbname = "bacula"; dbuser = "bacula"; dbpassword = "{{ mysql_bacula_pwd }}"
}

# Reasonable message delivery -- send most everything to email address
#  and to the console
Messages {
  Name = Standard

  mailcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula: %t %e of %c %l\" %r"
  operatorcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula: Intervention needed for %j\" %r"
  mail = root@localhost = all, !skipped
  operator = root@localhost = mount
  console = all, !skipped, !saved
#
# WARNING! the following will create a file that you must cycle from
#          time to time as it will grow indefinitely. However, it will
#          also keep all your messages if they scroll off the console.
#
  append = "/var/log/bacula/bacula.log" = all, !skipped
  catalog = all
}


#
# Message delivery for daemon messages (no job).
Messages {
  Name = Daemon
  mailcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula daemon message\" %r"
  mail = root@localhost = all, !skipped
  console = all, !skipped, !saved
  append = "/var/log/bacula/bacula.log" = all, !skipped
}

#
# Restricted console used by tray-monitor to get the status of the director
#
Console {
  Name = bacula-mon
  Password = "{{ MON_DIR_PASSWORD }}"
  CommandACL = status, .status
}
